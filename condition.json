// $in, $nin, implicit and condition


// $in = in

db.User_Info.findOne({gender: {$in: ["Male", "Female"]}})



// $nin = not in

db.User_Info.findOne({gender: {$nin: ["Male", "Female"]}})








// less then greater then
// implicit and

db.User_Info.find({
    gender: "Female",
    age: { $gt: 18, $lt: 30 }
},
    { age: 1, gender: 1 }
).sort({ age: 1 })





db.User_Info.find({
    gender: "Female", age: { $in: [18, 20] }
},
    { age: 1, gender: 1 }
).sort({ age: 1 })





db.User_Info.find({
    gender: "Female", age: { $in: [18, 20, 24, 30] }
},
    { age: 1, gender: 1 }
).sort({ age: 1 })





db.User_Info.find({
    gender: "Female", age: { $in: [18, 20, 24, 30] },
    interests: "Cooking",
},

    { age: 1, gender: 1, interests: 1 }
).sort({ age: 1 })





db.User_Info.find({
    gender: "Female", age: { $in: [18, 20, 24, 30] },
    interests: {$in: ["Cooking", "Gane"]},
},

    { age: 1, gender: 1, interests: 1 }
).sort({ age: 1 })







// $and, $or, implicit vs explicit


// explicit $and 

db.User_Info.find({
    $and: [
        {age: { $ne: 15 }},
        {age: {$ne: 30}}
        
        
        ]
})


db.User_Info.find({
    $and: [
        { age: { $ne: 15 }},
        { age: { $ne: 30 }}
    ]
}).project({
    age: 1
}).sort({ age: 1 });




// explicit $or
db.User_Info.find({
    $or: [
        {gender: "Female"},
        { age: { $ne: 15 }},
        { age: { $ne: 30 }}
    ]
}).project({
    age: 1
}).sort({ age: 1 });





db.User_Info.find({
    $or: [
        { "skills.name": "JAVASCRIPT" },
        { "skills.name": "PYTHON" }
    ]
}).project({
    skills: 1
}).sort({ age: 1 });




// explicit $in

db.User_Info.find({
    "skills.name" : { $in: ["JAVASCRIPT", "PYTHON"] }
}).project({
    skills: 1
}).sort({ age: 1 });







//  $exists, $type,$size


// $exists
db.User_Info.find({ age: {$exists: false} })

// $type
db.User_Info.find({ age: {$type: "string"} })




// type
db.User_Info.find( {age: {$type: "string"} } )


// $size
db.User_Info.find( {friends: {$size: 4} } )
.project({friends: 1})







// $all , $elemMatch


db.User_Info.find({
    "interests.2": "Cooking"
}).project({interests : 1})






// $all
db.User_Info.find({
    $all: [
        { "skills.name": "JAVASCRIPT" },
        { "skills.name": "PYTHON" }
    ]
}).project({
    skills: 1
}).sort({ age: 1 });


// $all
db.User_Info.find({
    interests: { $all: [ "Gardening", "Gaming", "Cooking" ]}
}).project({interests : 1})





// $elemMatch   
db.User_Info.find({
    "skills": {
        $elemMatch: {
            "name": "JAVASCRIPT",
            "level": "Intermediate"
        }
    }
}).project({
    skills: 1
}).sort({ age: 1 });


db.User_Info.find({
    skills: { $elemMatch: {
        name: "JAVASCRIPT",
        level: "Intermidiate"
    } }
 }).project({skills : 1})
 

 


//  $set, $addToSet, $push



// $set
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $set: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)

db.User_Info.find({_id: ObjectId("6406ad63fc13ae5a40000065") })

db.User_Info.updateOne({_id: ObjectId("6406ad63fc13ae5a40000065")},{$set:{
    email: "test@gmail.com"
}})



// $addToSet
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $addToSet: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)

db.User_Info.updateOne({ _id: ObjectId("6406ad63fc13ae5a40000065") },
    {
        $addToSet: {
            interests: { $each: ["Cooking", "Driving"]}
        }
    })


// $push
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $push: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)




// $unset, $pop, $pull, $pullAll



// $unset
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $unset: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)


db.User_Info.updateOne({ _id: ObjectId("6406ad63fc13ae5a40000065") },{
    $unset: { birthday : "" }})




// $pop
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $pop: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)

db.User_Info.updateOne({ _id: ObjectId("6406ad63fc13ae5a40000065") }, {
    $pop: {friends: 1}
})

db.User_Info.updateOne({ _id: ObjectId("6406ad63fc13ae5a40000065") }, {
    $pop: {friends: -1}
})



// $pull
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $pull: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)

db.User_Info.updateOne({ _id: ObjectId("6406ad63fc13ae5a40000065") }, {
    $pull: {friends: "Najmus Sakib"}
})




// $pullAll
db.User_Info.updateOne(
    { userName: "test_rabbi" },
    {
        $pullAll: {
            userName: "test_rabbi",
            password: 123,
            Phone: "0"
        }
    }
)




// $match , $project aggregation stage


db.User_Info.aggregate([
    {
        $match: {
            "skills.name": "JAVASCRIPT"
        }
    },
    {
        $project: {
            _id: 0,
            skills: 1
        }
    }
])




//  $addFields , $out , $merge aggregation stage


// addFields
db.User_Info.aggregate([
    {
        $addFields: {
            fullName: {
                $concat: ["$name.firstName", " ", "$name.lastName"]
            }
        }
    },
    {
        $project: {
            _id: 0,
            fullName: 1
        }
    }
])



// $out

db.User_Info.aggregate([
    {
        $out: "User_Info"
    }
])




// $merge
db.User_Info.aggregate([
    {
        $merge: {
            into: "User_Info",
            on: ["_id"],
            whenMatched: "merge",
            whenNotMatched: "discard"
        }
    }
])
  




// $group , $sum , $push aggregation stage


// $group
db.User_Info.aggregate([
    {
        $group: {
            _id: "$gender",
            count: { $sum: 1 }
        }
    },
    {
        $project: {
            _id: 0,
            gender: "$_id",
            count: 1
        }
    }
])


// $sum
db.User_Info.aggregate([
    {
        $group: {
            _id: "$gender",
            count: { $sum: "$age" }
        }
    },
    {
        $project: {
            _id: 0,
            gender: "$_id",
            count: 1
        }
    }
])


// $push
db.User_Info.aggregate([
    {
        $group: {
            _id: "$gender",
            friends: { $push: "$friends" }
        }
    },
    {
        $project: {
            _id: 0,
            gender: "$_id",
            friends: 1
        }
    }
])





//   $group & $project

// $group
db.User_Info.aggregate([
    {
        $group: {
            _id: "$gender",
            count: { $sum: 1 }
        }
    },
    {
        $project: {
            _id: 0,
            gender: "$_id",
            count: 1
        }
    }
])



// $project
db.User_Info.aggregate([
    {
        $project: {
            _id: 0,
            age: 1,
            gender: 1
        }
    }
])





//  $group with $unwind aggregation stage



// $group
db.User_Info.aggregate([
    {
        $group: {
            _id: "$gender",
            count: { $sum: 1 }
        }
    },
    {
        $project: {
            _id: 0,
            gender: "$_id",
            count: 1
        }
    }
])



// $unwind
db.User_Info.aggregate([
    {
        $group: {
            _id: "$gender",
            count: { $sum: 1 }
        }
    },
    {
        $project: {
            _id: 0,
            gender: "$_id",
            count: 1
        }
    },
    {
        $unwind: "$count"
    }
])





// $bucket, $sort, and $limit aggregation stage


// $bucket
db.User_Info.aggregate([
    {
        $bucket: {
            groupBy: "$gender",
            boundaries: [0, 10, 20, 30, 40, 50],
            output: {
                count: { $sum: 1 }
            }
        }
    }
])


// $sort
db.User_Info.aggregate([
    {
        $bucket: {
            groupBy: "$gender",
            boundaries: [0, 10, 20, 30, 40, 50],
            output: {
                count: { $sum: 1 }
            }
        }
    },
    {
        $sort: {
            count: 1
        }
    }
])


// $limit
db.User_Info.aggregate([    
    {
        $bucket: {
            groupBy: "$gender",
            boundaries: [0, 10, 20, 30, 40, 50],
            output: {
                count: { $sum: 1 }
            }
        }
    },
    {
        $sort: {
            count: 1
        }
    },
    {
        $limit: 1
    }
])






// $facet, multiple pipeline aggregation stage


// $facet
db.User_Info.aggregate([
    {
        $facet: {
            Male: [
                {
                    $match: {
                        gender: "Male"
                    }
                }
            ],
            Female: [
                {
                    $match: {
                        gender: "Female"
                    }
                }
            ]
        }
    }







    // compound index and text index

    // compound index
    // https://www.mongodb.com/docs/manual/core/indexes/index-types/index-compound/
    


    // text index
    // https://www.mongodb.com/docs/v6.1/core/index-text/


    // index visual
    // https://www.cs.usfca.edu/~galles/visualization/BTree.html